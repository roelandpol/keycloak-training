---
#    _______________
#   |  ___________  |
#   | |           | |
#   | |   o _ o   | |
#   | |  \_____/  | |
#   | |___________| |
#   |_______________|
#    __|_________|__
#   / ************* \
#  / *************** \
#  -------------------
#
- name: Login to OpenShift cluster
  shell:
    cmd: oc login -u admin -p redhat {{ hub_cluster_host }}
  environment:
    KUBECONFIG: "{{ kubeconfig }}"

- name: Retrieve keycloak name
  shell:
    cmd: oc get keycloak -n rhsso --no-headers | awk '{print $1}'
  register: keycloak_name

- name: Retrieve RH-SSO password
  shell:
    cmd: oc get secret {{ keycloak_name.stdout }}-initial-admin -n rhsso -o jsonpath="{.data.password}" | base64 -d
  register: rhsso_pass

- name: Configure kcadm credentials
  command: sh /home/student/DO313/solutions/compreview-rhsso/rhbk-24.0.8/bin/kcadm.sh config credentials --server https://sso.apps.ocp4.example.com --realm master --user admin --password {{ rhsso_pass.stdout }}

- name: Get user federation providers in rhtraining realm
  command: sh /home/student/DO313/solutions/compreview-rhsso/rhbk-24.0.8/bin/kcadm.sh get components -r rhtraining -q type=org.keycloak.storage.UserStorageProvider
  register: userfederation_output

- name: Check if the {{ idm_name }} user federation exists
  assert:
    that:
     - userfederation_output.stdout is search('{{ name_st }}')
    success_msg: "The {{ idm_name }} user federation does exist in the {{ realm_name }} realm"
    fail_msg: "The {{ idm_name }} user federation does not exist in the {{ realm_name }} realm"

- name: Check if {{ idm_provider }} attribute is correctly set to {{ idm_name }}
  assert:
    that:
      - userfederation_output.stdout is search('{{ provider_st }}')
    success_msg: "The {{ idm_provider }} attribute is set for the {{ idm_name }} user federation provider"
    fail_msg: "The {{ idm_provider }} attribute is not set for the {{ idm_name }} user federation provider"

- name: Check if the {{ idm_mode }} mode is correctly set to {{ idm_name }}
  assert:
    that:
      - userfederation_output.stdout is search('{{ mode_st }}')
    success_msg: "The {{ idm_mode }} mode is set for the {{ idm_name }} user federation provider"
    fail_msg: "The {{ idm_mode }} mode is not set for the {{ idm_name }} user federation provider"

