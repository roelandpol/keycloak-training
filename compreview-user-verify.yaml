---
#    _______________
#   |  ___________  |
#   | |           | |
#   | |   o _ o   | |
#   | |  \_____/  | |
#   | |___________| |
#   |_______________|
#    __|_________|__
#   / ************* \
#  / *************** \
#  -------------------
#
- name: Login to OpenShift cluster
  shell:
    cmd: oc login -u admin -p redhat {{ hub_cluster_host }}
  environment:
    KUBECONFIG: "{{ kubeconfig }}"

- name: Retrieve keycloak name
  shell:
    cmd: oc get keycloak -n rhsso --no-headers | awk '{print $1}'
  register: keycloak_name

- name: Retrieve RH-SSO password
  shell:
    cmd: oc get secret {{ keycloak_name.stdout }}-initial-admin -n rhsso -o jsonpath="{.data.password}" | base64 -d
  register: rhsso_pass

- name: Configure kcadm credentials
  command: >
    sh /home/student/DO313/solutions/compreview-rhsso/rhbk-24.0.8/bin/kcadm.sh
    config credentials --server https://sso.apps.ocp4.example.com
    --realm master --user admin --password {{ rhsso_pass.stdout }}


- name: Get users
  command: >
    sh /home/student/DO313/solutions/compreview-rhsso/rhbk-24.0.8/bin/kcadm.sh
    get users -r {{ realm_name }} -q username={{ user_name }}
  register: user_output

- name: Check if the {{ user_name }} user exists
  assert:
    that:
      - user_output.stdout is search('{{ user_name }}')
    success_msg: "The {{ user_name }} user does exist in the {{ realm_name }} realm"
    fail_msg: "The {{ user_name }} user does not exist in the {{ realm_name }} realm"

- name: Check if the firstName attribute is correctly set to {{ user_firstname }}
  assert:
    that:
      - user_output.stdout is search(firstname_st)
    success_msg: "The firstName attribute is set for the {{ user_name }} user"
    fail_msg: "The firstName attribute is not set for the {{ user_name }} user"

- name: Check if the lastName attribute is correctly set to {{ user_lastname }}
  assert:
    that:
      - user_output.stdout is search(lastname_st)
    success_msg: "The lastName attribute is set for the {{ user_name }} user"
    fail_msg: "The lastName attribute is not set for the {{ user_name }} user"

- name: Check if the email attribute is correctly set to {{ user_email }}
  assert:
    that:
      - user_output.stdout is search(email_st)
    success_msg: "The email attribute is set for the {{ user_name }} user"
    fail_msg: "The email attribute is not set for the {{ user_name }} user"

- name: Check if the user {{ user_name }} is enabled
  assert:
    that:
      - user_output.stdout is search(enabled_st)
    success_msg: "The {{ user_name }} user is enabled"
    fail_msg: "The {{ user_name }} user is not enabled"

- name: Check if {{ user_name }} is in the {{ realm_role_to_check }} and {{ realm_role2_to_check }} role
  command: >
    sh /home/student/DO313/solutions/compreview-rhsso/rhbk-24.0.8/bin/kcadm.sh get-roles
    -r {{ realm_name }}
    --uusername {{ user_name }}
    --effective
  register: roles_output
  ignore_errors: true

- name: Check if {{ user_name }} is in the {{ realm_role_to_check }} role
  assert:
    that:
      - roles_output.stdout is search('{{ realm_role_to_check }}')
    success_msg: "The {{ user_name }} user is in the {{ realm_role_to_check }} role"
    fail_msg: "The {{ user_name }} user is not in the {{ realm_role_to_check }} role"

- name: Check if {{ user_name }} is in the {{ realm_role2_to_check }} role
  assert:
    that:
      - roles_output.stdout is search('{{ realm_role2_to_check }}')
    success_msg: "The {{ user_name }} user is in the {{ realm_role2_to_check }} role"
    fail_msg: "The {{ user_name }} user is not in the {{ realm_role2_to_check }} role"

- name: Get user id
  shell: >
    sh /home/student/DO313/solutions/compreview-rhsso/rhbk-24.0.8/bin/kcadm.sh
    get users -r {{ realm_name }} -q username={{ user_name }}
    --fields id | jq '.[].id' | tr -d '"'
  register: user_output_id

- name: Get user group
  command: >
    sh /home/student/DO313/solutions/compreview-rhsso/rhbk-24.0.8/bin/kcadm.sh
    get users/{{ user_output_id.stdout }}/groups -r {{ realm_name }}
  register: user_output_group

- name: Check if the {{ user_name }} user is in {{ user_group }}
  assert:
    that:
      - user_output_group.stdout is search('{{ user_group }}')
    success_msg: "The {{ user_name }} user is in the {{ user_group }} group"
    fail_msg: "The {{ user_name }} user is not in the {{ user_group }} group"

- name: Configure kcadm credentials for the {{ user_name }} user
  command: >
    sh /home/student/DO313/solutions/compreview-rhsso/rhbk-24.0.8/bin/kcadm.sh
    config credentials --server https://sso.apps.ocp4.example.com
    --realm {{ realm_name }} --user {{ user_name }} --password {{ user_password }}
  register: credentials_output
  ignore_errors: true

- name: Check if the password is set to {{ user_password }} for the {{ user_name }} user
  assert:
    that:
      - credentials_output.rc == 0
    success_msg: "The password is correctly set for the {{ user_name }} user"
    fail_msg: "The password is not correctly set for the {{ user_name }} user"

